time<-seq(start_time,end_time,by="months")
for (ln in listnames) {
dflist[[ln]] <- data.frame(
Lon=rep(x,(length(y)*length(t))),
Lat=rep(rep(y,each=length(x)),length(t)),
time=rep(time,each=(length(x)*length(y))),
CAMSvar=c(ncvar[[which(listnames==ln)]])
)
}
return(dflist)
}
CAMSnetcdftopoints <- function(years, path_in, file_in, boundary, remove_in = TRUE){
file_names <- zip::zip_list(file_in)
df_temp <- vector(mode = "list",length = length(years))
for (y in 1:length(years)) {
# Unzip the netcdf file
idx <- which(grepl(pattern = years[y], x = file_names$filename))
unzip(zipfile = file_in,files = file_names$filename[idx])
# Open the netcdf file
nc <- ncdf4::nc_open(paste0(path_in,file_names$filename[idx]))
# Manage data
variables <- names(nc$var)
variables <- variables[variables %notin% c("date","fef","slv")]
df_amm <- getvarCAMS(nc = nc,
year = years,
boundary = boundary,
variables = variables)
for (s in 1:length(df_amm)) {
df_amm[[s]] <- df_amm[[s]] %>%
pivot_longer(cols = "CAMSvar", values_to = "Values", names_to = "Var") %>%
mutate(Var = gsub(" ", "_", nc$var[[variables[s]]]$longname))
}
df_temp[[y]] <- bind_rows(df_amm) %>%
pivot_wider(names_from = Var, values_from = Values)
if (remove_in == TRUE) {
# Remove netcdf
file.remove(paste0(path_in,file_names$filename[idx]))
file.remove(paste0(path_in,file_in))
}
}
df <- bind_rows(df_temp)
return(df)
}
library(tidyverse)
library(ecmwfr)
library(ncdf4)
"%notin%"<-Negate("%in%")
boundary <- c(8.05,11.85,44.35,46.95) #boundary of Lombardy
cams_nh3 <- CAMSnetcdftopoints(years = 2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
CAMSdatadownload(dataset = "CAMSgei", path = getwd(), variable = c("ammonia"),
year = c(2020), source = c("anthropogenic"), job_name = "Ammonia")
##### Download data from CAMS
CAMSdatadownload(dataset = "CAMSgei", path = getwd(), variable = c("ammonia"),
year = c(2019:2020), source = c("anthropogenic"), job_name = "Ammonia")
boundary <- c(8.05,11.85,44.35,46.95) #boundary of Lombardy
cams_nh3 <- CAMSnetcdftopoints(years = 2019:2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
cams_nh3 <- CAMSnetcdftopoints(years = 2019:2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
years = 2019:2020
path_in = paste0(getwd(),"/")
file_in = "Ammonia.zip"
boundary
file_names <- zip::zip_list(file_in)
df_temp <- vector(mode = "list",length = length(years))
file_names
df_temp
y <- 1
# Unzip the netcdf file
idx <- which(grepl(pattern = years[y], x = file_names$filename))
unzip(zipfile = file_in,files = file_names$filename[idx])
# Open the netcdf file
nc <- ncdf4::nc_open(paste0(path_in,file_names$filename[idx]))
# Manage data
variables <- names(nc$var)
variables <- variables[variables %notin% c("date","fef","slv")]
df_amm <- getvarCAMS(nc = nc,
year = years,
boundary = boundary,
variables = variables)
nc
years
df_amm <- getvarCAMS(nc = nc,
year = years[y],
boundary = boundary,
variables = variables)
CAMSnetcdftopoints <- function(years, path_in, file_in, boundary, remove_in = TRUE){
file_names <- zip::zip_list(file_in)
df_temp <- vector(mode = "list",length = length(years))
for (y in 1:length(years)) {
# Unzip the netcdf file
idx <- which(grepl(pattern = years[y], x = file_names$filename))
unzip(zipfile = file_in,files = file_names$filename[idx])
# Open the netcdf file
nc <- ncdf4::nc_open(paste0(path_in,file_names$filename[idx]))
# Manage data
variables <- names(nc$var)
variables <- variables[variables %notin% c("date","fef","slv")]
df_amm <- getvarCAMS(nc = nc,
year = years[y],
boundary = boundary,
variables = variables)
for (s in 1:length(df_amm)) {
df_amm[[s]] <- df_amm[[s]] %>%
pivot_longer(cols = "CAMSvar", values_to = "Values", names_to = "Var") %>%
mutate(Var = gsub(" ", "_", nc$var[[variables[s]]]$longname))
}
df_temp[[y]] <- bind_rows(df_amm) %>%
pivot_wider(names_from = Var, values_from = Values)
if (remove_in == TRUE) {
# Remove netcdf
file.remove(paste0(path_in,file_names$filename[idx]))
file.remove(paste0(path_in,file_in))
}
}
df <- bind_rows(df_temp)
return(df)
}
cams_nh3 <- CAMSnetcdftopoints(years = 2019:2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
paste0(path_in,file_names$filename[idx])
file.exists(paste0(path_in,file_names$filename[idx]))
CAMSnetcdftopoints <- function(years, path_in, file_in, boundary, remove_in = TRUE){
file_names <- zip::zip_list(file_in)
df_temp <- vector(mode = "list",length = length(years))
for (y in 1:length(years)) {
# Unzip the netcdf file
idx <- which(grepl(pattern = years[y], x = file_names$filename))
if (file.exists(paste0(path_in,file_names$filename[idx])) == FALSE) {
unzip(zipfile = file_in,files = file_names$filename[idx])
}
# Open the netcdf file
nc <- ncdf4::nc_open(paste0(path_in,file_names$filename[idx]))
# Manage data
variables <- names(nc$var)
variables <- variables[variables %notin% c("date","fef","slv")]
df_amm <- getvarCAMS(nc = nc,
year = years[y],
boundary = boundary,
variables = variables)
for (s in 1:length(df_amm)) {
df_amm[[s]] <- df_amm[[s]] %>%
pivot_longer(cols = "CAMSvar", values_to = "Values", names_to = "Var") %>%
mutate(Var = gsub(" ", "_", nc$var[[variables[s]]]$longname))
}
df_temp[[y]] <- bind_rows(df_amm) %>%
pivot_wider(names_from = Var, values_from = Values)
if (remove_in == TRUE) {
# Remove netcdf
file.remove(paste0(path_in,file_names$filename[idx]))
file.remove(paste0(path_in,file_in))
}
}
df <- bind_rows(df_temp)
return(df)
}
cams_nh3 <- CAMSnetcdftopoints(years = 2019:2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
##### Download data from CAMS
CAMSdatadownload(dataset = "CAMSgei", path = getwd(), variable = c("ammonia"),
year = c(2019:2020), source = c("anthropogenic"), job_name = "Ammonia")
boundary <- c(8.05,11.85,44.35,46.95) #boundary of Lombardy
cams_nh3 <- CAMSnetcdftopoints(years = 2019:2020, path_in = paste0(getwd(),"/"), file_in = "Ammonia.zip",
boundary = boundary)
##################################
#
# SC-SAR new
#
#####################################
library(SparseM)
library(MASS)
library(spatialreg)
library(spdep)
library(sp)
library(dplyr)
library(spdep)
library(spatialreg)
library(sf)
library(ggplot2)
library(tidyverse)
library(texreg)
library(xtable)
library(ggpubr)
rm(list=ls())
'%notin%' <- Negate('%in%')
user <- "Paolo"
if (user == "Paolo") {
setwd("H:/Il mio Drive/SpatialClustering/SpatReg_SCR_MatteraMaranzano")
}
if (user == "Raffaele") {
setwd("H:/Il mio Drive/JABES Paolo")
}
#########################################
########## Auxiliary functions ##########
#########################################
source("Cluster_SAR_AuxFuns.R", encoding = 'UTF-8')
#################################
########## Toy example ##########
#################################
# Non funziona a Paolo (non trova i dati)
if (user == "Raffaele") {
# Example data
Data <- rio::import("Matrice_SLL_96_05_19.xlsx", sheet=3) # 1 for 1996, 3 for 2019
Data$vaa <- log(Data$vaa)
Data$vap <- log(Data$vap)
Data$vas <- log(Data$vas)
Data$den <- log(Data$den)
Data$dis <- log(Data$dis)
Data[,3:10] <- scale(Data[,3:10])
Y0 <- cbind(Data$vaa)
X0 <- Data[,6:ncol(Data)]
X0 <- X0[,-6] # rimuovo "ind" perchè crea clusters dove ind è sempre 0
# attenzione con dummy variables, queste cose possono capitare!!
shpprov <- readOGR("SLL_2011_2018.shp") # 2019
rswm_q <- poly2nb(shpprov, queen = TRUE)
set.ZeroPolicyOption(TRUE)
set.ZeroPolicyOption(TRUE)
Bmat <- nb2listw(rswm_q, style = "B", zero.policy = T)
Wmat2 <- listw2mat(Bmat)
Sp <- coordinates(shpprov)
#Wmat1 <- as.matrix(dist(Sp))
# Do methods work?
#############################
reg0 <- Cl_spatialReg(Y=Y0, X=X0, Sp=Sp, W=Wmat2, type="lm")
summary(reg0$Results[[1]])
summary(reg0$Results[[2]])
reg0 <- Cl_spatialReg(Y=Y0, X=X0, G=2, Sp=Sp, W=Wmat2, type="lagsarlm")
summary(reg0$Results[[1]])
summary(reg0$Results[[2]])
reg0$group
table(reg0$group)
reg0$ML
a=G_select(Y=Y0, X=X0, Sp=Sp, W=Wmat2, type="lagsarlm")
reg0 <- Cl_spatialReg(Y=Y0, X=X0, Sp=Sp, W=Wmat2, type="errorsarlm")
summary(reg0$Results[[1]])
summary(reg0$Results[[2]])
reg0$group
table(reg0$group)
reg0$ML
reg0 <- Cl_spatialReg(Y=Y0, X=X0, Sp=Sp, W=Wmat2, type="lmSLX")
summary(reg0$Results[[1]])
summary(reg0$Results[[2]])
reg0$group
table(reg0$group)
reg0$ML
}
##############################################################################################
########## Application: Analysis of the agricultural market concentration in Europe ##########
##############################################################################################
##### Dataset from Eurostat
load("AgroDataset_NUTS2_Extended.RData")
##### Preliminary data manipulation
# Drop Cyprus, Malta and Ireland
# Drop extra-continental regions
Data <- Agro_NUTS2_sf2 %>%
dplyr::filter(geo %notin% c("EU28","CY00","MT00","ELZZ","FRA1","FRA2","FRA3","FRA4","ES64"),
!grepl(pattern = "IE", x = geo),
farmtype_lab %in% c("Total"), uaarea_lab %in% c("Total"),
organic_lab %in% c("Total"),so_eur %in% c("KE0")) %>%
mutate(Gini_SO = case_when(geo == "LT00" & time == 2020 ~ Gini_SO[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_SO[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_SO[geo == "BE10" & time == 2013],
TRUE ~ Gini_SO),
Gini_HA = case_when(geo == "LT00" & time == 2020 ~ Gini_HA[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_HA[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_HA[geo == "BE10" & time == 2013],
TRUE ~ Gini_HA))
# Add NUTS-1 and NUTS-0 code
g10 <- g10 %>%
mutate(geo_NUTS0 = substr(geo,start=1,stop=2),
geo_NUTS1 = substr(geo,start=1,stop=3))
# Shapefile of the national borders for mapping
Countries <- g10 %>%
filter(geo %in% unique(Data$geo)) %>%
select(geo_NUTS0,geometry) %>%
group_by(geo_NUTS0) %>%
summarise()
##### Graphical representation
Data$RoadsKM_KM2 <- Data$RoadsKM/Data$LandKM2_Total
Y_name <- "RoadsKM_KM2"
Data %>%
select(time,Y = .data[[Y_name]]) %>%
ggplot() +
geom_sf(mapping = aes(fill = Y)) +
geom_sf(data = Countries, linewidth = 1.05, show.legend=FALSE, alpha=0,color="#000000") +
facet_wrap(~time) +
scale_fill_gradient2(mid = "#FFFFFF",low = "#00FF00",high = "#FF0000",
midpoint = mean(Data[[Y_name]],na.rm=T)) +
labs(x = "", y = "", title = Y_name) +
theme(plot.title = element_text(size = 18, face = "bold"),
axis.text = element_text(size = 12),strip.text = element_text(size = 16),
axis.title = element_text(size = 14))
#####################
##### YEAR 2010 #####
#####################
dta2010 <- Data %>%
dplyr::filter(time == 2010,
farmtype_lab %in% c("Total"), uaarea_lab %in% c("Total"),
organic_lab %in% c("Total"),so_eur %in% c("KE0"))
dta2010b <- na.omit(dta2010)
dta2010b$LandKM2_Total
sum(dta2010b$LandKM2_Total)
##### Dataset from Eurostat
load("AgroDataset_NUTS2_Extended.RData")
##### Preliminary data manipulation
# Drop Cyprus, Malta and Ireland
# Drop extra-continental regions
Data <- Agro_NUTS2_sf2 %>%
dplyr::filter(geo %notin% c("EU28","CY00","MT00","ELZZ","FRA1","FRA2","FRA3","FRA4","ES64"),
!grepl(pattern = "IE", x = geo),
farmtype_lab %in% c("Total"), uaarea_lab %in% c("Total"),
organic_lab %in% c("Total"),so_eur %in% c("KE0")) %>%
mutate(Gini_SO = case_when(geo == "LT00" & time == 2020 ~ Gini_SO[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_SO[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_SO[geo == "BE10" & time == 2013],
TRUE ~ Gini_SO),
Gini_HA = case_when(geo == "LT00" & time == 2020 ~ Gini_HA[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_HA[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_HA[geo == "BE10" & time == 2013],
TRUE ~ Gini_HA))
#########################################################################################################################################
##########                              Cerqueti, R., Maranzano, P. & Mattera, R. (2024+)                                      ##########
########## "Spatially-clustered spatial autoregressive models with application to agricultural market concentration in Europe" ##########
##########                                  Code for the application (Sections 4 and 5)                                        ##########
#########################################################################################################################################
#################
##### Setup #####
#################
library(SparseM)
library(MASS)
library(spatialreg)
library(spdep)
library(sp)
library(dplyr)
library(spdep)
library(spatialreg)
library(sf)
library(ggplot2)
library(tidyverse)
library(texreg)
library(xtable)
library(ggpubr)
rm(list=ls())
'%notin%' <- Negate('%in%')
user <- "Paolo"
if (user == "Paolo") {
setwd("H:/Il mio Drive/SpatialClustering/SpatReg_SCR_MatteraMaranzano")
}
if (user == "Raffaele") {
setwd("H:/Il mio Drive/JABES Paolo")
}
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration")
#########################################################################################################################################
##########                              Cerqueti, R., Maranzano, P. & Mattera, R. (2024+)                                      ##########
########## "Spatially-clustered spatial autoregressive models with application to agricultural market concentration in Europe" ##########
##########                                  Code for the application (Sections 4 and 5)                                        ##########
#########################################################################################################################################
#################
##### Setup #####
#################
library(SparseM)
library(MASS)
library(spatialreg)
library(spdep)
library(sp)
library(dplyr)
library(spdep)
library(spatialreg)
library(sf)
library(ggplot2)
library(tidyverse)
library(texreg)
library(xtable)
library(ggpubr)
rm(list=ls())
'%notin%' <- Negate('%in%')
ToyExample <- FALSE
if (user == "Paolo") {
setwd("H:/Il mio Drive/SpatialClustering/SpatReg_SCR_MatteraMaranzano")
}
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration")
#########################################################################################################################################
##########                              Cerqueti, R., Maranzano, P. & Mattera, R. (2024+)                                      ##########
########## "Spatially-clustered spatial autoregressive models with application to agricultural market concentration in Europe" ##########
##########                                  Code for the application (Sections 4 and 5)                                        ##########
#########################################################################################################################################
#################
##### Setup #####
#################
library(SparseM)
library(MASS)
library(spatialreg)
library(spdep)
library(sp)
library(dplyr)
library(spdep)
library(spatialreg)
library(sf)
library(ggplot2)
library(tidyverse)
library(texreg)
library(xtable)
library(ggpubr)
rm(list=ls())
'%notin%' <- Negate('%in%')
ToyExample <- FALSE
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration")
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
load("H:/Il mio Drive/SpatialClustering/SpatReg_SCR_MatteraMaranzano/AgroDataset_NUTS2_Extended.RData")
##### Preliminary data manipulation
# Drop Cyprus, Malta and Ireland
# Drop extra-continental regions
Data <- Agro_NUTS2_sf2 %>%
dplyr::filter(geo %notin% c("EU28","CY00","MT00","ELZZ","FRA1","FRA2","FRA3","FRA4","ES64"),
!grepl(pattern = "IE", x = geo),
farmtype_lab %in% c("Total"), uaarea_lab %in% c("Total"),
organic_lab %in% c("Total"),so_eur %in% c("KE0")) %>%
mutate(Gini_SO = case_when(geo == "LT00" & time == 2020 ~ Gini_SO[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_SO[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_SO[geo == "BE10" & time == 2013],
TRUE ~ Gini_SO),
Gini_HA = case_when(geo == "LT00" & time == 2020 ~ Gini_HA[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_HA[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_HA[geo == "BE10" & time == 2013],
TRUE ~ Gini_HA))
'%notin%' <- Negate('%in%')
ToyExample <- FALSE
##### Preliminary data manipulation
# Drop Cyprus, Malta and Ireland
# Drop extra-continental regions
Data <- Agro_NUTS2_sf2 %>%
dplyr::filter(geo %notin% c("EU28","CY00","MT00","ELZZ","FRA1","FRA2","FRA3","FRA4","ES64"),
!grepl(pattern = "IE", x = geo),
farmtype_lab %in% c("Total"), uaarea_lab %in% c("Total"),
organic_lab %in% c("Total"),so_eur %in% c("KE0")) %>%
mutate(Gini_SO = case_when(geo == "LT00" & time == 2020 ~ Gini_SO[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_SO[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_SO[geo == "BE10" & time == 2013],
TRUE ~ Gini_SO),
Gini_HA = case_when(geo == "LT00" & time == 2020 ~ Gini_HA[geo == "LT00" & time == 2016],
geo == "BE10" & time == 2020 ~ Gini_HA[geo == "BE10" & time == 2016],
geo == "BE10" & time == 2010 ~ Gini_HA[geo == "BE10" & time == 2013],
TRUE ~ Gini_HA))
# Add NUTS-1 and NUTS-0 code
g10 <- g10 %>%
mutate(geo_NUTS0 = substr(geo,start=1,stop=2),
geo_NUTS1 = substr(geo,start=1,stop=3))
# Shapefile of the national borders for mapping
Countries <- g10 %>%
filter(geo %in% unique(Data$geo)) %>%
select(geo_NUTS0,geometry) %>%
group_by(geo_NUTS0) %>%
summarise()
save(g10,Data,Countries,file = "RC_PM_RM_SCSAR_Data.RData")
getwd()
#########################################################################################################################################
##########                              Cerqueti, R., Maranzano, P. & Mattera, R. (2024+)                                      ##########
########## "Spatially-clustered spatial autoregressive models with application to agricultural market concentration in Europe" ##########
##########                                  Code for the application (Sections 4 and 5)                                        ##########
#########################################################################################################################################
#################
##### Setup #####
#################
library(SparseM)
library(MASS)
library(spatialreg)
library(spdep)
library(sp)
library(dplyr)
library(spdep)
library(spatialreg)
library(sf)
library(ggplot2)
library(tidyverse)
library(texreg)
library(xtable)
library(ggpubr)
rm(list=ls())
'%notin%' <- Negate('%in%')
ToyExample <- FALSE
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration")
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration")
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration/Data and code")
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration/Data and code")
setwd("C:/Users/paulm/OneDrive/Documenti/GitHub/RC_PM_RM_SCSAR_AgroConcentration/Data and code")
#########################################
########## Auxiliary functions ##########
#########################################
source("RC_PM_RM_SCSAR_AuxFuns", encoding = 'UTF-8')
source("~/GitHub/RC_PM_RM_SCSAR_AgroConcentration/Data and code/RC_PM_RM_SCSAR_AuxFuns.R", encoding = 'UTF-8')
##### Dataset from Eurostat
load("RC_PM_RM_SCSAR_Data.RData")
